#!/bin/bash

# üöÄ Production deployment script –¥–ª—è 1C Contract Service

set -e

echo "üè• Deploying 1C Contract Service to Production"
echo "=============================================="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "docker-compose.yml" ]; then
    echo "‚ùå Error: docker-compose.yml not found. Run from project root directory."
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ ! -f ".env" ]; then
    echo "‚ùå Error: .env file not found"
    echo "üìã Please copy .env.example to .env and configure:"
    echo "   cp .env.example .env"
    echo "   # Edit .env with your production values"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker is not installed!"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose is not installed!"
    exit 1
fi

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
source .env

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if [ "$API_KEY" = "CHANGE_THIS_API_KEY_FOR_1C_INTEGRATION" ]; then
    echo "‚ùå Error: Please change API_KEY in .env file!"
    exit 1
fi

if [ "$POSTGRES_PASSWORD" = "CHANGE_THIS_PASSWORD" ]; then
    echo "‚ùå Error: Please change POSTGRES_PASSWORD in .env file!"
    exit 1
fi

echo "‚úÖ Environment variables validated"

# –°–æ–∑–¥–∞–Ω–∏–µ backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
mkdir -p backups

# Backup —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
if docker volume ls | grep -q "hg-doc-storage_postgres_data"; then
    echo "üì¶ Creating database backup..."
    docker-compose exec -T db pg_dump -U postgres contract_db > "backups/db_backup_$(date +%Y%m%d_%H%M%S).sql" || true
fi

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo "üõë Stopping existing containers..."
docker-compose down

# –°–±–æ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤
echo "üî® Building application image..."
docker-compose build --no-cache app

# –ó–∞–ø—É—Å–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ MinIO
echo "üóÑÔ∏è Starting database and storage..."
docker-compose up -d db minio

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î
echo "‚è≥ Waiting for database to be ready..."
timeout=60
while [ $timeout -gt 0 ]; do
    if docker-compose exec -T db pg_isready -U postgres -d contract_db; then
        echo "‚úÖ Database is ready"
        break
    fi
    sleep 2
    ((timeout--))
done

if [ $timeout -eq 0 ]; then
    echo "‚ùå Database failed to start within 2 minutes"
    exit 1
fi

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
echo "üóÑÔ∏è Running database migrations..."
docker-compose run --rm app alembic upgrade head

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
echo "üöÄ Starting application..."
docker-compose up -d app

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
echo "‚è≥ Waiting for application to be ready..."
timeout=60
while [ $timeout -gt 0 ]; do
    if curl -f http://localhost:8000/health &>/dev/null; then
        echo "‚úÖ Application is ready"
        break
    fi
    sleep 2
    ((timeout--))
done

if [ $timeout -eq 0 ]; then
    echo "‚ùå Application failed to start within 2 minutes"
    echo "üìã Check logs: docker-compose logs app"
    exit 1
fi

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑–∞–ø—É—Å–∫ Nginx (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω reverse proxy)
read -p "üåê Start Nginx reverse proxy? (y/N): " start_nginx
if [[ $start_nginx =~ ^[Yy]$ ]]; then
    if [ ! -f "nginx/ssl/cert.pem" ]; then
        echo "‚ö†Ô∏è Warning: SSL certificates not found in nginx/ssl/"
        echo "üìã Please add your SSL certificates to nginx/ssl/ directory"
        echo "   - cert.pem (certificate)"
        echo "   - key.pem (private key)"
    fi
    docker-compose --profile production up -d nginx
    echo "‚úÖ Nginx started"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
echo ""
echo "üìä Service Status:"
docker-compose ps

echo ""
echo "‚úÖ Deployment completed successfully!"
echo ""
echo "üîó Service URLs:"
echo "   Health Check: http://localhost:8000/health"
echo "   API Base URL: $BASE_URL"
echo "   MinIO Console: http://localhost:9001"
echo ""
echo "üîê Security Information:"
echo "   API Key: $API_KEY"
echo "   Environment: $ENVIRONMENT"
echo ""
echo "üìã Next Steps:"
echo "1. Test the API with your 1C integration"
echo "2. Configure your domain DNS to point to this server"
echo "3. Set up SSL certificates in nginx/ssl/ if using Nginx"
echo "4. Configure backup strategy for volumes"
echo "5. Set up monitoring and alerting"
echo ""
echo "üìù Useful Commands:"
echo "   View logs: docker-compose logs -f app"
echo "   Stop service: docker-compose down"
echo "   Backup database: docker-compose exec db pg_dump -U postgres contract_db > backup.sql"
echo ""
echo "‚ö†Ô∏è Important: Keep your .env file secure and backed up!"
