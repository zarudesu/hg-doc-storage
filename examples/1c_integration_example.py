"""
üîí –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å 1–° (Production)
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å API –∫–ª—é—á–∞–º–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
"""

import requests
import json
import os
from pathlib import Path


class Secure1CIntegration:
    """–ó–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Å–µ—Ä–≤–∏—Å–∞"""
    
    def __init__(self, base_url: str, api_key: str):
        self.base_url = base_url
        self.api_key = api_key
        self.session = requests.Session()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.session.headers.update({
            'Authorization': f'Bearer {api_key}',
            'User-Agent': '1C-Integration/1.0'
        })
    
    def upload_original(self, client_id: str, contract_type: str, pdf_path: str) -> dict:
        """
        üîí –ó–∞—â–∏—â–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        –¢—Ä–µ–±—É–µ—Ç API –∫–ª—é—á –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization
        """
        url = f"{self.base_url}/api/v1/upload"
        
        # –•–µ—à–∏—Ä—É–µ–º client_id –¥–ª—è –∑–∞—â–∏—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        hashed_client_id = f"CLIENT_{hash(client_id) % 1000000:06d}"
        
        data = {
            'client_id': hashed_client_id,  # –•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID
            'contract_type': contract_type
        }
        
        with open(pdf_path, 'rb') as pdf_file:
            files = {'file': ('contract.pdf', pdf_file, 'application/pdf')}
            response = self.session.post(url, data=data, files=files, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω (–∑–∞—â–∏—â–µ–Ω–Ω–æ):")
            print(f"   UUID: {result['contract_id']}")
            print(f"   –°—Å—ã–ª–∫–∞: {result['file_url']}")
            print(f"   Client ID (—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π): {hashed_client_id}")
            return result
        elif response.status_code == 401:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
            raise Exception("Invalid API key")
        elif response.status_code == 403:
            print(f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: IP –∞–¥—Ä–µ—Å –Ω–µ –≤ whitelist")
            raise Exception("IP not allowed")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
            print(f"   {response.text}")
            raise Exception("Upload failed")
    
    def upload_signed(self, contract_id: str, signer_id: str, signed_pdf_path: str) -> dict:
        """
        üîí –ó–∞—â–∏—â–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        """
        url = f"{self.base_url}/api/v1/sign/{contract_id}"
        
        # –•–µ—à–∏—Ä—É–µ–º signer_id –¥–ª—è –∑–∞—â–∏—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        hashed_signer_id = f"SIGNER_{hash(signer_id) % 1000000:06d}"
        
        data = {'signer_id': hashed_signer_id}
        
        with open(signed_pdf_path, 'rb') as pdf_file:
            files = {'file': ('signed_contract.pdf', pdf_file, 'application/pdf')}
            response = self.session.post(url, data=data, files=files, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω (–∑–∞—â–∏—â–µ–Ω–Ω–æ):")
            print(f"   UUID: {result['contract_id']}")
            print(f"   –°—Å—ã–ª–∫–∞: {result['signed_file_url']}")
            print(f"   Signer ID (—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π): {hashed_signer_id}")
            return result
        elif response.status_code == 401:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
            raise Exception("Invalid API key")
        elif response.status_code == 404:
            print(f"‚ùå –î–æ–≥–æ–≤–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise Exception("Contract not found")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {response.status_code}")
            print(f"   {response.text}")
            raise Exception("Signed upload failed")
    
    def get_status(self, contract_id: str) -> dict:
        """üîí –ó–∞—â–∏—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–≥–æ–≤–æ—Ä–∞"""
        url = f"{self.base_url}/api/v1/status/{contract_id}"
        response = self.session.get(url, timeout=10)
        
        if response.status_code == 200:
            return response.json()
        elif response.status_code == 401:
            raise Exception("Invalid API key")
        else:
            raise Exception(f"Status check failed: {response.status_code}")
    
    def download_file(self, contract_id: str, file_type: str, save_path: str):
        """
        üì• –ü—É–±–ª–∏—á–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ (–±–µ–∑ API –∫–ª—é—á–∞)
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ UUID
        """
        url = f"{self.base_url}/api/v1/download/{contract_id}/{file_type}"
        
        # –î–ª—è download –Ω–µ –Ω—É–∂–µ–Ω API –∫–ª—é—á, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é
        response = requests.get(url, timeout=30)
        
        if response.status_code == 200:
            with open(save_path, 'wb') as f:
                f.write(response.content)
            print(f"‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω: {save_path}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {response.status_code}")


def create_test_pdf(filename: str):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª"""
    pdf_content = b"""%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj
2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj
3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
>>
endobj
4 0 obj
<<
/Length 88
>>
stream
BT
/F1 12 Tf
100 700 Td
(CONFIDENTIAL CONTRACT DOCUMENT) Tj
0 -20 Td
(Patient: *** PERSONAL DATA *** ) Tj
ET
endstream
endobj
xref
0 5
0000000000 65535 f 
0000000010 00000 n 
0000000053 00000 n 
0000000100 00000 n 
0000000179 00000 n 
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
320
%%EOF"""
    
    with open(filename, 'wb') as f:
        f.write(pdf_content)


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ workflow"""
    print("üîí –ó–∞—â–∏—â–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 1–° –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 60)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ .env –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥–∞ 1–°)
    BASE_URL = os.getenv('API_BASE_URL', 'http://localhost:8000')
    API_KEY = os.getenv('API_KEY', 'your-secret-api-key-change-in-production')
    
    print(f"üåê API URL: {BASE_URL}")
    print(f"üîë API Key: {API_KEY[:10]}..." if API_KEY else "‚ùå API_KEY not set")
    
    if not API_KEY or API_KEY == 'your-secret-api-key-change-in-production':
        print("‚ö†Ô∏è Warning: Using default API key. Set API_KEY environment variable.")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
    except:
        print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –æ–Ω –∑–∞–ø—É—â–µ–Ω.")
        return
    
    api = Secure1CIntegration(BASE_URL, API_KEY)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    print(f"\nüìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö PDF —Ñ–∞–π–ª–æ–≤...")
    create_test_pdf("original_secure.pdf")
    create_test_pdf("signed_secure.pdf")
    
    # –î–æ–±–∞–≤–ª—è–µ–º "–ø–æ–¥–ø–∏—Å—å" –≤–æ –≤—Ç–æ—Ä–æ–π —Ñ–∞–π–ª
    with open("signed_secure.pdf", "ab") as f:
        f.write(b"\n% DIGITAL SIGNATURE - Dr. Ivan Petrov\n")
        f.write(b"% TIMESTAMP: 2025-08-15 12:00:00 UTC\n")
    
    try:
        # –®–∞–≥ 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (—Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö)
        print(f"\nüîí –®–∞–≥ 1: –ó–∞—â–∏—â–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
        upload_result = api.upload_original(
            client_id="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",  # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–±—É–¥—É—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω—ã)
            contract_type="surgery",
            pdf_path="original_secure.pdf"
        )
        
        contract_id = upload_result['contract_id']
        
        # –®–∞–≥ 2: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        print(f"\nüîí –®–∞–≥ 2: –ó–∞—â–∏—â–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
        sign_result = api.upload_signed(
            contract_id=contract_id,
            signer_id="–î–æ–∫—Ç–æ—Ä –ü–µ—Ç—Ä–æ–≤ –ò.–ò.",  # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–±—É–¥—É—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω—ã)
            signed_pdf_path="signed_secure.pdf"
        )
        
        # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        print(f"\nüîí –®–∞–≥ 3: –ó–∞—â–∏—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...")
        status = api.get_status(contract_id)
        print(f"   –°—Ç–∞—Ç—É—Å: {status['status']}")
        print(f"   –¢–∏–ø: {status['contract_type']}")
        print(f"   –°–æ–∑–¥–∞–Ω: {status['created_at']}")
        print(f"   –ü–æ–¥–ø–∏—Å–∞–Ω: {status['signed_at']}")
        print(f"   Client ID (—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π): {status['client_id']}")
        print(f"   Signer ID (—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π): {status['signer_id']}")
        
        # –®–∞–≥ 4: –ü—É–±–ª–∏—á–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ (—á–µ—Ä–µ–∑ UUID)
        print(f"\nüì• –®–∞–≥ 4: –ü—É–±–ª–∏—á–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
        api.download_file(contract_id, "original", "downloaded_original_secure.pdf")
        api.download_file(contract_id, "signed", "downloaded_signed_secure.pdf")
        
        print(f"\n‚úÖ –ó–∞—â–∏—â–µ–Ω–Ω—ã–π workflow –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"\nüîê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
        print(f"   - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω—ã")
        print(f"   - API –∑–∞—â–∏—â–µ–Ω –∫–ª—é—á–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        print(f"   - –§–∞–π–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ UUID")
        print(f"   - –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è")
        
        print(f"\nüîó –ü—É–±–ª–∏—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:")
        print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª: {upload_result['file_url']}")
        print(f"   –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π: {sign_result['signed_file_url']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º API –∫–ª—é—á–æ–º
        print(f"\nüß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        try:
            bad_api = Secure1CIntegration(BASE_URL, "wrong-api-key")
            bad_api.get_status("550e8400-e29b-41d4-a716-446655440000")
        except Exception as auth_error:
            print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á: {auth_error}")
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        for file in ["original_secure.pdf", "signed_secure.pdf", 
                    "downloaded_original_secure.pdf", "downloaded_signed_secure.pdf"]:
            Path(file).unlink(missing_ok=True)


if __name__ == "__main__":
    main()
