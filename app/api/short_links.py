from fastapi import APIRouter, Depends, HTTPException, Request
from fastapi.responses import Response
from sqlalchemy.ext.asyncio import AsyncSession
from app.core.database import get_db
from app.services.contract_service import ContractService
from app.core.security import get_client_ip
import logging

logger = logging.getLogger(__name__)
router = APIRouter(tags=["Short Links"])


@router.get("/{file_identifier}")
async def get_document_universal(
    file_identifier: str,
    request: Request,
    db: AsyncSession = Depends(get_db)
):
    """
    üìé –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    –ü—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    –õ–æ–≥–∏–∫–∞:
    - –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë
    - –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–π - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –ö–æ—Ä–æ—Ç–∫–∏–π ID (8 —Å–∏–º–≤–æ–ª–æ–≤): abc12345
    - –ü–æ–ª–Ω—ã–π UUID (36 —Å–∏–º–≤–æ–ª–æ–≤): 65d694a2-20bf-4df8-bff4-72ef9b7eeb7c
    """
    
    client_ip = get_client_ip(request)
    logger.info(f"Universal download request from IP: {client_ip}, identifier: {file_identifier}")
    
    try:
        # –ò—â–µ–º –¥–æ–≥–æ–≤–æ—Ä –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
        contract = await ContractService.resolve_contract_id(db, file_identifier)
        if not contract:
            raise HTTPException(status_code=404, detail="Document not found")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞
        file_result = await ContractService.get_latest_file_content(contract)
        if not file_result:
            raise HTTPException(status_code=404, detail="File content not found")
        
        file_content, file_type = file_result
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        status_suffix = "signed" if file_type == "signed" else "original"
        filename = f"contract_{contract.short_id}_{status_suffix}.pdf"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        return Response(
            content=file_content,
            media_type="application/pdf",
            headers={
                "Content-Disposition": f"attachment; filename={filename}",
                "X-File-Type": file_type,
                "X-Contract-Status": contract.status,
                "X-Short-ID": contract.short_id,
                # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                "Cache-Control": "public, max-age=300" if contract.status == "signed" else "no-cache",
                "ETag": f'"{contract.id}-{file_type}"'
            }
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error in universal download: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")
