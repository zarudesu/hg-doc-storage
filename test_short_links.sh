#!/bin/bash

# üß™ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Å—ã–ª–æ–∫ v2.0
# –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE="${API_BASE:-https://doc.yourcompany.ru}"
API_KEY="${API_KEY:-your-api-key-here}"

echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Å—ã–ª–æ–∫ v2.0"
echo "=================================="
echo "Base URL: $API_BASE"
echo ""

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v curl &> /dev/null; then
        log_error "curl –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ curl –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        exit 1
    fi
    
    if ! command -v jq &> /dev/null; then
        log_warning "jq –Ω–µ –Ω–∞–π–¥–µ–Ω. JSON –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
        JQ_AVAILABLE=false
    else
        JQ_AVAILABLE=true
    fi
    
    log_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
check_health() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ health check..."
    
    HEALTH_RESPONSE=$(curl -s -w "%{http_code}" -o health_response.tmp "$API_BASE/health")
    HTTP_CODE=${HEALTH_RESPONSE: -3}
    
    if [ "$HTTP_CODE" = "200" ]; then
        log_success "–°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $HTTP_CODE)"
        if [ "$JQ_AVAILABLE" = true ]; then
            cat health_response.tmp | jq .
        else
            cat health_response.tmp
        fi
    else
        log_error "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $HTTP_CODE)"
        cat health_response.tmp
        exit 1
    fi
    
    rm -f health_response.tmp
    echo ""
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF
create_test_pdf() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF..."
    
    cat > test_contract.pdf << 'EOF'
%PDF-1.4
1 0 obj<</Type/Catalog/Pages 2 0 R>>endobj
2 0 obj<</Type/Pages/Kids[3 0 R]/Count 1>>endobj
3 0 obj<</Type/Page/Parent 2 0 R/MediaBox[0 0 612 792]/Contents 4 0 R>>endobj
4 0 obj<</Length 44>>stream
BT /F1 12 Tf 100 700 Td (Test Contract Document) Tj ET
endstream
endobj
xref
0 5
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000207 00000 n 
trailer<</Size 5/Root 1 0 R>>
startxref
296
%%EOF
EOF
    
    log_success "–¢–µ—Å—Ç–æ–≤—ã–π PDF —Å–æ–∑–¥–∞–Ω ($(wc -c < test_contract.pdf) –±–∞–π—Ç)"
}

# –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏
test_upload_original() {
    log_info "–¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞..."
    
    CLIENT_ID="CLIENT_TEST_$(date +%s)"
    
    UPLOAD_RESPONSE=$(curl -s -w "%{http_code}" -o upload_response.tmp \
        -X POST "$API_BASE/api/v1/upload" \
        -H "Authorization: Bearer $API_KEY" \
        -F "client_id=$CLIENT_ID" \
        -F "contract_type=surgery" \
        -F "file=@test_contract.pdf")
    
    HTTP_CODE=${UPLOAD_RESPONSE: -3}
    
    if [ "$HTTP_CODE" = "200" ]; then
        log_success "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ (HTTP $HTTP_CODE)"
        
        if [ "$JQ_AVAILABLE" = true ]; then
            cat upload_response.tmp | jq .
            CONTRACT_ID=$(cat upload_response.tmp | jq -r '.contract_id')
            SHORT_ID=$(cat upload_response.tmp | jq -r '.short_id')
            SHORT_URL=$(cat upload_response.tmp | jq -r '.short_url')
        else
            cat upload_response.tmp
            # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–µ–∑ jq
            CONTRACT_ID=$(grep -o '"contract_id":"[^"]*"' upload_response.tmp | cut -d'"' -f4)
            SHORT_ID=$(grep -o '"short_id":"[^"]*"' upload_response.tmp | cut -d'"' -f4)
            SHORT_URL=$(grep -o '"short_url":"[^"]*"' upload_response.tmp | cut -d'"' -f4)
        fi
        
        log_info "Contract ID: $CONTRACT_ID"
        log_info "Short ID: $SHORT_ID"
        log_info "Short URL: $SHORT_URL"
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–æ–≤
        export CONTRACT_ID SHORT_ID SHORT_URL
        
    else
        log_error "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (HTTP $HTTP_CODE)"
        cat upload_response.tmp
        exit 1
    fi
    
    rm -f upload_response.tmp
    echo ""
}

# –¢–µ—Å—Ç 2: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–µ (–æ—Ä–∏–≥–∏–Ω–∞–ª)
test_download_short_original() {
    log_info "–¢–µ—Å—Ç 2: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–µ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª)..."
    
    if [ -z "$SHORT_ID" ]; then
        log_error "SHORT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç."
        return
    fi
    
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    curl -s -D headers_original.tmp -o downloaded_original.pdf "$API_BASE/$SHORT_ID"
    
    if [ -f "downloaded_original.pdf" ] && [ -s "downloaded_original.pdf" ]; then
        FILE_SIZE=$(wc -c < downloaded_original.pdf)
        log_success "–§–∞–π–ª —Å–∫–∞—á–∞–Ω –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–µ ($FILE_SIZE –±–∞–π—Ç)"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        log_info "–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:"
        grep -E "X-File-Type|X-Contract-Status|X-Short-ID|Content-Disposition" headers_original.tmp || true
        
        FILE_TYPE=$(grep "X-File-Type:" headers_original.tmp | cut -d' ' -f2 | tr -d '\r\n' || echo "unknown")
        log_info "–¢–∏–ø —Ñ–∞–π–ª–∞: $FILE_TYPE"
        
        if [ "$FILE_TYPE" = "original" ]; then
            log_success "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª"
        else
            log_warning "–û–∂–∏–¥–∞–ª—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª, –ø–æ–ª—É—á–µ–Ω: $FILE_TYPE"
        fi
    else
        log_error "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–µ"
        cat headers_original.tmp
    fi
    
    rm -f headers_original.tmp
    echo ""
}

# –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–≥–æ–≤–æ—Ä–∞
test_status_check() {
    log_info "–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–≥–æ–≤–æ—Ä–∞..."
    
    if [ -z "$CONTRACT_ID" ]; then
        log_error "CONTRACT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç."
        return
    fi
    
    STATUS_RESPONSE=$(curl -s -w "%{http_code}" -o status_response.tmp \
        -X GET "$API_BASE/api/v1/status/$CONTRACT_ID" \
        -H "Authorization: Bearer $API_KEY")
    
    HTTP_CODE=${STATUS_RESPONSE: -3}
    
    if [ "$HTTP_CODE" = "200" ]; then
        log_success "–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ (HTTP $HTTP_CODE)"
        
        if [ "$JQ_AVAILABLE" = true ]; then
            cat status_response.tmp | jq .
            STATUS=$(cat status_response.tmp | jq -r '.status')
        else
            cat status_response.tmp
            STATUS=$(grep -o '"status":"[^"]*"' status_response.tmp | cut -d'"' -f4)
        fi
        
        log_info "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: $STATUS"
        
        if [ "$STATUS" = "uploaded" ]; then
            log_success "–°—Ç–∞—Ç—É—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"
        else
            log_warning "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: $STATUS"
        fi
    else
        log_error "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (HTTP $HTTP_CODE)"
        cat status_response.tmp
    fi
    
    rm -f status_response.tmp
    echo ""
}

# –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
create_signed_pdf() {
    log_info "–¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–∞..."
    
    # –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –¥–æ–±–∞–≤–ª—è–µ–º "–ø–æ–¥–ø–∏—Å—å"
    cp test_contract.pdf signed_contract.pdf
    echo "% Digital signature added by test at $(date)" >> signed_contract.pdf
    
    log_success "–ü–æ–¥–ø–∏—Å–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ ($(wc -c < signed_contract.pdf) –±–∞–π—Ç)"
}

# –¢–µ—Å—Ç 5: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
test_upload_signed() {
    log_info "–¢–µ—Å—Ç 5: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞..."
    
    if [ -z "$CONTRACT_ID" ]; then
        log_error "CONTRACT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç."
        return
    fi
    
    SIGNER_ID="SIGNER_TEST_$(date +%s)"
    
    SIGN_RESPONSE=$(curl -s -w "%{http_code}" -o sign_response.tmp \
        -X POST "$API_BASE/api/v1/sign/$CONTRACT_ID" \
        -H "Authorization: Bearer $API_KEY" \
        -F "signer_id=$SIGNER_ID" \
        -F "file=@signed_contract.pdf")
    
    HTTP_CODE=${SIGN_RESPONSE: -3}
    
    if [ "$HTTP_CODE" = "200" ]; then
        log_success "–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω (HTTP $HTTP_CODE)"
        
        if [ "$JQ_AVAILABLE" = true ]; then
            cat sign_response.tmp | jq .
            RETURNED_SHORT_URL=$(cat sign_response.tmp | jq -r '.short_url')
        else
            cat sign_response.tmp
            RETURNED_SHORT_URL=$(grep -o '"short_url":"[^"]*"' sign_response.tmp | cut -d'"' -f4)
        fi
        
        log_info "–í–æ–∑–≤—Ä–∞—â–µ–Ω–Ω–∞—è –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞: $RETURNED_SHORT_URL"
        
        if [ "$RETURNED_SHORT_URL" = "$SHORT_URL" ]; then
            log_success "–ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å –Ω–µ–∏–∑–º–µ–Ω–Ω–æ–π! ‚ú®"
        else
            log_error "–ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å! –û–∂–∏–¥–∞–ª–∞—Å—å: $SHORT_URL, –ø–æ–ª—É—á–µ–Ω–∞: $RETURNED_SHORT_URL"
        fi
        
    else
        log_error "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (HTTP $HTTP_CODE)"
        cat sign_response.tmp
    fi
    
    rm -f sign_response.tmp
    echo ""
}

# –¢–µ—Å—Ç 6: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–µ (—Ç–µ–ø–µ—Ä—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π)
test_download_short_signed() {
    log_info "–¢–µ—Å—Ç 6: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ —Ç–æ–π –∂–µ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–µ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π)..."
    
    if [ -z "$SHORT_ID" ]; then
        log_error "SHORT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç."
        return
    fi
    
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    curl -s -D headers_signed.tmp -o downloaded_signed.pdf "$API_BASE/$SHORT_ID"
    
    if [ -f "downloaded_signed.pdf" ] && [ -s "downloaded_signed.pdf" ]; then
        FILE_SIZE=$(wc -c < downloaded_signed.pdf)
        log_success "–§–∞–π–ª —Å–∫–∞—á–∞–Ω –ø–æ —Ç–æ–π –∂–µ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–µ ($FILE_SIZE –±–∞–π—Ç)"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        log_info "–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:"
        grep -E "X-File-Type|X-Contract-Status|X-Short-ID|Content-Disposition" headers_signed.tmp || true
        
        FILE_TYPE=$(grep "X-File-Type:" headers_signed.tmp | cut -d' ' -f2 | tr -d '\r\n' || echo "unknown")
        CONTRACT_STATUS=$(grep "X-Contract-Status:" headers_signed.tmp | cut -d' ' -f2 | tr -d '\r\n' || echo "unknown")
        
        log_info "–¢–∏–ø —Ñ–∞–π–ª–∞: $FILE_TYPE"
        log_info "–°—Ç–∞—Ç—É—Å –¥–æ–≥–æ–≤–æ—Ä–∞: $CONTRACT_STATUS"
        
        if [ "$FILE_TYPE" = "signed" ] && [ "$CONTRACT_STATUS" = "signed" ]; then
            log_success "üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è!"
        else
            log_warning "–û–∂–∏–¥–∞–ª—Å—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Ñ–∞–π–ª, –ø–æ–ª—É—á–µ–Ω —Ç–∏–ø: $FILE_TYPE, —Å—Ç–∞—Ç—É—Å: $CONTRACT_STATUS"
        fi
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
        if [ -f "downloaded_original.pdf" ]; then
            ORIGINAL_SIZE=$(wc -c < downloaded_original.pdf)
            SIGNED_SIZE=$(wc -c < downloaded_signed.pdf)
            
            if [ "$SIGNED_SIZE" -gt "$ORIGINAL_SIZE" ]; then
                log_success "–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –±–æ–ª—å—à–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ ($SIGNED_SIZE > $ORIGINAL_SIZE –±–∞–π—Ç)"
            else
                log_warning "–†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤: –æ—Ä–∏–≥–∏–Ω–∞–ª=$ORIGINAL_SIZE, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π=$SIGNED_SIZE"
            fi
        fi
        
    else
        log_error "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"
        cat headers_signed.tmp
    fi
    
    rm -f headers_signed.tmp
    echo ""
}

# –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
test_final_status() {
    log_info "–¢–µ—Å—Ç 7: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞..."
    
    if [ -z "$CONTRACT_ID" ]; then
        log_error "CONTRACT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç."
        return
    fi
    
    FINAL_STATUS_RESPONSE=$(curl -s -w "%{http_code}" -o final_status_response.tmp \
        -X GET "$API_BASE/api/v1/status/$CONTRACT_ID" \
        -H "Authorization: Bearer $API_KEY")
    
    HTTP_CODE=${FINAL_STATUS_RESPONSE: -3}
    
    if [ "$HTTP_CODE" = "200" ]; then
        log_success "–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω (HTTP $HTTP_CODE)"
        
        if [ "$JQ_AVAILABLE" = true ]; then
            cat final_status_response.tmp | jq .
            FINAL_STATUS=$(cat final_status_response.tmp | jq -r '.status')
        else
            cat final_status_response.tmp
            FINAL_STATUS=$(grep -o '"status":"[^"]*"' final_status_response.tmp | cut -d'"' -f4)
        fi
        
        if [ "$FINAL_STATUS" = "signed" ]; then
            log_success "–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: $FINAL_STATUS"
        else
            log_warning "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: $FINAL_STATUS"
        fi
    else
        log_error "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ (HTTP $HTTP_CODE)"
        cat final_status_response.tmp
    fi
    
    rm -f final_status_response.tmp
    echo ""
}

# –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å—Ç–∞—Ä—ã—Ö API
test_legacy_compatibility() {
    log_info "–¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ API..."
    
    if [ -z "$CONTRACT_ID" ]; then
        log_error "CONTRACT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç."
        return
    fi
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ä—ã—Ö endpoints —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ endpoint –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞..."
    curl -s -D headers_legacy_original.tmp -o legacy_original.pdf \
        "$API_BASE/api/v1/download/$CONTRACT_ID/original"
    
    if [ -f "legacy_original.pdf" ] && [ -s "legacy_original.pdf" ]; then
        log_success "–°—Ç–∞—Ä—ã–π API –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_warning "–ü—Ä–æ–±–ª–µ–º–∞ —Å–æ —Å—Ç–∞—Ä—ã–º API –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞"
    fi
    
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ endpoint –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ..."
    curl -s -D headers_legacy_signed.tmp -o legacy_signed.pdf \
        "$API_BASE/api/v1/download/$CONTRACT_ID/signed"
    
    if [ -f "legacy_signed.pdf" ] && [ -s "legacy_signed.pdf" ]; then
        log_success "–°—Ç–∞—Ä—ã–π API –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_warning "–ü—Ä–æ–±–ª–µ–º–∞ —Å–æ —Å—Ç–∞—Ä—ã–º API –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ"
    fi
    
    rm -f headers_legacy_*.tmp legacy_*.pdf
    echo ""
}

# –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª–Ω—ã–º UUID
test_full_uuid() {
    log_info "–¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª–Ω—ã–º UUID..."
    
    if [ -z "$CONTRACT_ID" ]; then
        log_error "CONTRACT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç."
        return
    fi
    
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ –ø–æ–ª–Ω–æ–º—É UUID
    curl -s -D headers_uuid.tmp -o downloaded_uuid.pdf "$API_BASE/$CONTRACT_ID"
    
    if [ -f "downloaded_uuid.pdf" ] && [ -s "downloaded_uuid.pdf" ]; then
        FILE_SIZE=$(wc -c < downloaded_uuid.pdf)
        log_success "–§–∞–π–ª —Å–∫–∞—á–∞–Ω –ø–æ –ø–æ–ª–Ω–æ–º—É UUID ($FILE_SIZE –±–∞–π—Ç)"
        
        FILE_TYPE=$(grep "X-File-Type:" headers_uuid.tmp | cut -d' ' -f2 | tr -d '\r\n' || echo "unknown")
        log_info "–¢–∏–ø —Ñ–∞–π–ª–∞: $FILE_TYPE"
        
        if [ "$FILE_TYPE" = "signed" ]; then
            log_success "–ü–æ–ª–Ω—ã–π UUID –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é"
        else
            log_warning "–ü–æ–ª–Ω—ã–π UUID –≤–µ—Ä–Ω—É–ª: $FILE_TYPE"
        fi
    else
        log_error "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ –ø–æ–ª–Ω–æ–º—É UUID"
    fi
    
    rm -f headers_uuid.tmp downloaded_uuid.pdf
    echo ""
}

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
cleanup() {
    log_info "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    rm -f test_contract.pdf signed_contract.pdf
    rm -f downloaded_*.pdf *.tmp
    log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
generate_report() {
    echo ""
    echo "üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢"
    echo "================="
    
    if [ -n "$CONTRACT_ID" ]; then
        echo "‚úÖ Contract ID: $CONTRACT_ID"
    fi
    
    if [ -n "$SHORT_ID" ]; then
        echo "‚úÖ Short ID: $SHORT_ID"
    fi
    
    if [ -n "$SHORT_URL" ]; then
        echo "‚úÖ Short URL: $SHORT_URL"
        echo ""
        echo "üéØ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ:"
        echo "   $SHORT_URL"
        echo ""
        echo "üì± SMS —à–∞–±–ª–æ–Ω:"
        echo "   –î–æ–≥–æ–≤–æ—Ä –≥–æ—Ç–æ–≤: $SHORT_URL"
    fi
    
    echo ""
    echo "‚ú® –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã:"
    echo "   ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏"
    echo "   ‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–µ"  
    echo "   ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"
    echo "   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é"
    echo "   ‚úÖ –ù–µ–∏–∑–º–µ–Ω–Ω–æ—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏"
    echo "   ‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ API"
    echo "   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª–Ω–æ–≥–æ UUID"
    echo ""
    echo "üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    check_dependencies
    check_health
    create_test_pdf
    
    test_upload_original
    test_download_short_original
    test_status_check
    
    create_signed_pdf
    test_upload_signed
    test_download_short_signed
    test_final_status
    
    test_legacy_compatibility
    test_full_uuid
    
    cleanup
    generate_report
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
trap cleanup EXIT

# –ó–∞–ø—É—Å–∫
main "$@"
